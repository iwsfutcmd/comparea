#!/usr/bin/env python3
'''Removes water from a set of OSM features by intersecting with land polygons.

Input to this script is the "pass.tsv" file generated by osm_filter.py,
which looks like:

    osm_type<tab>osm_id<tab>wikipedia article<tab>name<tab>...

Water clipping takes ~2 minutes per feature on a 2014 MacBook Pro.
'''

import csv
import fileinput
import json
import os
import subprocess
import sys
import tempfile
from data import geojson_util
from data import only_polygons
from data import osm

LAND_FEATURES = '/Users/danvk/Downloads/land-polygons-complete-4326/land_polygons.shp'

def intersect_with_land(geojson_path):
    '''Generates a new GeoJSON file with '.land' in its name.
    
    See http://stackoverflow.com/a/25370541/388951 for background.
    '''
    tmpdir = tempfile.mkdtemp()
    d = json.load(open(geojson_path))

    # 1. remove non-polygons
    # 2. calculate bounding box
    # 3. subset land_polygons.shp to the bounding box
    # 4. clip land_polygons.shp using the shape.

    only_polygons.remove_non_polygons(d)
    polygons_file = tempfile.mktemp(prefix='poly', suffix='.json', dir=tmpdir)
    json.dump(d, open(polygons_file, 'wb'))
    sys.stderr.write('Wrote polygons to %s\n' % polygons_file)

    minlat, minlon, maxlat, maxlon = geojson_util.bbox_of_feature(d)
    latrange = maxlat - minlat
    lonrange = maxlon - minlon
    minlat -= 0.05 * latrange
    maxlat += 0.05 * latrange
    minlon -= 0.05 * lonrange
    maxlon += 0.05 * lonrange

    subset_file = tempfile.mktemp(prefix='landrect', suffix='.shp', dir=tmpdir)
    cmd = map(str, ['ogr2ogr', subset_file, '-clipsrc', minlon, minlat, maxlon, maxlat, LAND_FEATURES])

    sys.stderr.write('Running %s\n' % ' '.join(cmd))
    subprocess.check_call(cmd)

    output_file = geojson_path.replace('.json', '.land.json')
    cmd = map(str, ['ogr2ogr', '-f', 'GeoJSON', output_file, '-clipsrc', polygons_file, subset_file])
    sys.stderr.write('Running %s\n' % ' '.join(cmd))
    subprocess.check_call(cmd)


if __name__ == '__main__':
    osm_fetcher = osm.OSM()

    for line in fileinput.input():
        osm_type, osm_id = line.strip().split('\t')[:2]

        path = os.path.join(osm_fetcher.cache_dir,
                '%s%s.xml.json' % (osm_type, osm_id))
        try:
            intersect_with_land(path)
        except:
            sys.stderr.write('Unable to landify %s/%s\n' % (osm_type, osm_id))
            pass
